# 当前运行的应用环境如：prod、dev、test
# 默认会读取机器上/opt/settings/server.properties(linux)或C:\\opt\\settings\\server.properties(windows)文件中的env属性作为环境标识 (兼容Apollo获取方式)
# 对应生效的配置文件为agent-{env}.properties（可不配置） 注：加载顺序为 agent.properties > agent-{env}.properties
service.env =
# 当前运行的应用名称，因日志生成目录会使用该参数，所以必须有值，该值读取顺序为：读取启动参数中的MonitorAgent.service.name，不存在则读取skywalking.agent.service_name的配置值（兼容skywalking，无需重复配置），依然不存在则使用当前配置值，未配置则不增强应用（使用默认值可能导致日志被覆盖），不支持远程配置
service.name =
# 远程配置的url，支持多个地址配置，多个使用英文逗号分隔（不支持远程配置）
config.remote_url =


############################ 插件启用/禁用配置
# 启用/禁用SPI，不配置默认为启用，显式启用方式为：spi.类名=enable, 禁用配置方式为：spi.类名=disable

# 禁用所有SPI插件，不执行任何类增强，即使配置了enable也会禁用
#spi.plugin=disable
# Metric所有插件默认的启用/禁用状态，可避免单个配置（仅针对IMetricMatcher的实现类起作用），如果IMetricMatcher的实现类配置了enable，则不会被禁用
#spi.Metric=disable
# PoolMonitor所有插件默认的启用/禁用状态，可避免单个配置（仅针对IPoolMonitorMatcher的实现类起作用），如果IPoolMonitorMatcher的实现类配置了enable，则不会被禁用
#spi.PoolMonitor=disable
# Trace所有插件默认的启用/禁用状态，可避免单个配置（仅针对ITraceMatcher的实现类起作用），如果IPoolMonitorMatcher的实现类配置了enable，则不会被禁用
spi.Trace=disable
# 其他ITraceMatcher、IMetricMatcher、IPoolMonitorMatcher实现类，支持启动阶段禁用以及运行阶段禁用，但启动阶段禁用后运行节点启用不生效

#spi.RemoteConfigLoader=disable
#spi.JVMMetricsSchedule=disable
#spi.DisableSpiConfigReader=disable
#spi.LogReport=disable
#spi.TraceLogReport=disable
#spi.EventSubscribeConfigReader=disable
#spi.AnnotationSubscribeMatcher=disable
#spi.RunMonitor=disable

############################ 忽略增强的配置
# 忽略增强的classLoader类名（部分类加载器增强时会导致找不到类而启动不了），多个使用英文逗号分隔
ignore.classLoaderNames=com.vip.saturn.job.executor.SaturnClassLoader
# 忽略增强的类正则，使用\r\n分隔多个配置
ignore.enhance.classRegular=
# 忽略增强的方法正则，使用\r\n分隔多个配置
ignore.enhance.methodRegular=


############################ 缓存长度配置
# 方法调用事件的缓存队列长度，必须为2的N次方，需考虑占用内存，太小可能导致事件丢弃
bufferSize.metric=4096
# 链路Span缓存队列长度，必须为2的N次方，需考虑占用内存，太小可能导致事件丢弃
bufferSize.trace=4096
# 事件订阅缓存队列长度，必须为2的N次方，需考虑占用内存，太小可能导致事件丢弃
bufferSize.subcribeEvent=2048
# 数据上报缓存队列长度，必须为2的N次方，需考虑占用内存，太小可能导致事件丢弃
bufferSize.report=2048

############################ 监控数据输出间隔配置
# 方法调用事件的缓存队列发布事件统计输出间隔秒数
metricOutput.interval.publish.metric=10
# 链路Span缓存队列发布事件统计输出间隔秒数
metricOutput.interval.publish.trace=10
# 事件订阅缓存队列发布事件统计输出间隔秒数
metricOutput.interval.publish.subcribeEvent=10
# 数据上报缓存队列发布事件统计输出间隔秒数
metricOutput.interval.publish.report=10
# metric事件消费统计数据输出间隔秒数
metricOutput.interval.consume.metric=10
# 链路Span缓存队列消费事件统计输出间隔秒数
metricOutput.interval.consume.trace=10
# 事件订阅缓存队列消费事件统计输出间隔秒数
metricOutput.interval.consume.subcribeEvent=10
# 数据上报缓存队列消费事件统计输出间隔秒数
metricOutput.interval.consume.report=10
# jvm监控数据输出间隔秒数
metricOutput.interval.jvm=10
# 池监控统计数据输出间隔秒数
metricOutput.interval.pool=10
# 运行心跳数据输出间隔秒数
metricOutput.interval.heartbeat=10
# 注意：配置值如果大于metricOutput.interval.consume.metric，会导致metricOutput.interval.consume.metric失效
metricOutput.interval.metric=1
# qps/rt统计输出的周期秒数，如果超过1，则每次输出时汇总间隔内的所有数据，开始时间从2020-11-01 00:00:00开始算，转换为每个周期的开始时间
# 注意：该值必须小于RTEventConsume.STATISTICS_SECOND_SIZE - metricOutput.interval.metric，否则会导致数据丢失，如果不符合要求，则设置metricOutput.interval.metric=1，metric.period.second=1
metric.period.second=5

# 定时任务调度核心线程数，只要继承ISchedule的类都使用此处的线程调度
schedule.corePoolSize=5


############################ 自定义类方法QPS/RT配置
# 自定义实例方法RT统计配置
#InstanceMethodMatcher.test3=.*cn\\.ecpark\\.tool\\.javaagent\\.TestService\\.add\\(.*
#InstanceMethodMatcher.test=.*java\\.util\\.concurrent\\.ThreadPoolExecutor\\.execute\\(.*
#InstanceMethodMatcher.test2=.*java\\.util\\.concurrent\\.ArrayBlockingQueue\\.add\\(.*
# 自定义静态方法RT统计配置
#StatisticMethodMatcher.test3=.*cn\\.ecpark\\.tool\\.javaagent\\.TestService\\.multiply\\(.*
#StatisticMethodMatcher.test=.*java\\.time\\.Duration\\.ofHours\\(.*


############################ 上报配置
# 全局默认上报统计数据使用的report类型，可配置多个，多个使用英文逗号分隔，目前支持：log、http、log-trace
report=log
# 链路span上报地址，需配置report.spanListener=http-span
report.http-span.url=http://localhost:9411/api/v2/spans
# 服务运行状态上报地址，需配置report.runStatus.async=http-status
report.http-status.url=http://localhost:8080/serviceStatus/report
# 一种类型数据上报使用的类型，可配置多个，多个使用英文逗号分隔，如果希望异步带缓冲的方式上报，则在key后增加.async，代码中MultiReportFactory.getReport的参数不用带.async
report.statistic=log
# Span上报方式，直接上报Span到zipkin后台方便测试，地址配置为：report.http-span.url
#report.spanListener=http-span
report.spanListener=log-trace
# 启动状态变更异步上传到服务端，目前应用在服务启动、关闭、心跳上
report.runStatus.async=log
# 自定义监控数据上报方式
report.collect=log
# 池监控数据上报方式
report.poolMonitor=log
# JVM监控数据上报方式
report.jvmMetric=log
# 缓冲事件发布数据监控上报方式
report.eventPublish=log
# 缓冲事件监听数据监控上报方式
report.eventListener=log

############################ 消费线程数配置
# metric事件消费线程数，如果数量大于1，按照事件类型hash值分配到不同的消费线程上
consume.threadNum.metric=5
# 链路跟踪Span上报线程个数，如果数量大于1，多线程随机消费
consume.threadNum.trace=5
# 事件订阅通知线程个数，如果数量大于1，多线程按照类名及方法名hash值分配到不同的消费线程上
consume.threadNum.subcribeEvent=2
# 异步上报线程个数，如果数量大于1，多线程按照report类型hash值分配到不同的消费线程上
consume.threadNum.report=3

############################ 链路采样率配置
# 全局采样量配置，如果配置了该值，则类型采样量配置自动失效，全局限制，仅针对sample.strategy为leader或followerAndLeader
#trace.sample.qps.global=100
# 每秒默认采样span个数，仅针对sample.strategy为leader或followerAndleader，如果类型采样量未配置则使用该值
trace.sample.qps.default=10
# 每种类型的Span采样策略
	# key说明：trace.sample.strategy.类型
	# 值说明：none - 不采样；
			# always - 都采样；
			# follower - 跟随，如果上游包含了链路则生成Span，否则忽略，默认为该值；
			# leader - 使用采样量决定要不要生成Span；
			# followerAndLeader - 上游存在链路则生成Span，否则按照采样量生成；
trace.sample.strategy.mq-publish=leader
# kafka采样量配置，sample.strategy为leader或followerAndleader配置生效，未配置类型采样量则使用trace.sample.qps.default
#trace.sample.qps.mq-publish=20
trace.sample.strategy.mq-consume=leader
#trace.sample.qps.mq-consume=20
trace.sample.strategy.dubbo-client=always
trace.sample.strategy.dubbo-server=always
trace.sample.strategy.http-server=always
trace.sample.strategy.http-client=always
trace.sample.strategy.redis=follower
trace.sample.strategy.mysql=follower
trace.sample.strategy.mongo=follower

#trace.custom.mq-plugin.message=com.example.webflux.Message

############################ 内存队列满时发布是否丢弃的配置，如果在乎数据的完整性并且可接收队列满时对服务自身处理速度的影响，则此处可以设置为false
# metric事件堆积量超过buffer时是否丢弃新产生的事件，如果配置为false有可能影响服务正常调用速度，默认为true
eventPublish.discard.metric=true
# trace span堆积量超过buffer时是否丢弃新产生的事件，如果配置为false有可能影响服务正常调用速度，默认为true
eventPublish.discard.trace=true
# 订阅事件堆积量超过buffer时是否丢弃新产生的事件，如果配置为false有可能影响服务正常调用速度，默认为true（eventSubscribe.callAsync为true时生效）
eventPublish.discard.subcribeEvent=true

############################ 方法调用事件订阅配置
# 订阅事件检测死循环的最小调用栈大小，避免因代码错误导致死循环同时也降低检测性能损耗，如果死循环时的调用栈长度小于该值，则需要人为调小该值，默认为10
eventSubscribe.check.minSize=10
# 事件是否为异步订阅，默认为true，即异步调用，如果为false，则事件源与订阅逻辑处于同一个线程，同步调用
eventSubscribe.callAsync=true
# 事件订阅配置，格式为：eventSubscribe.group.xxx=source classMethodRegular > subscribe className.methodRegular
# 	key说明：xxx为自定义字符串，代表事件分组，如果包含.ignoreParams.则不强制订阅方法参数必须包含被订阅方法参数，被订阅方法中的参数也不会传递到订阅方法的参数中，
#       如果key中不包含.ignoreParams.，则subscribe className.methodRegular的方法参数必须包含source classMethodRegular的方法参数且位置一致
# 	value说明：source classMethodRegular为被订阅类方法正则，subscribe className.methodRegular为订阅类全称及方法正则，其中方法正则中必须包含一个参数起始(
#	订阅方法参数后面可多出3种类型的参数（ignoreParams的也一样）：被订阅类实例、被订阅方法返回值、被订阅方法抛出的异常，参数的位置放在最后，这个三个参数的顺序不限先后
# 该功能用于简化方法调用通知的实现，通过配置即可订阅方法调用事件（如果使用代理的方式实现，需要研发额外开发代码，而且针对jar包中的很多类无法做到代理拦截）
# 配置支持一个方法被多个注册者监听，一个监听者也可以监听多个方法，多对多的关系
# 注意：在订阅类中不能再调用被订阅类的订阅方法，否则会导致死循环(已做了运行限制)；事件的通知是异步的，如果消费慢于生产可能导致事件丢弃；在一个分组内的事件通知为单线程调用；
# 为什么要设置不同分组，因为在一个组内被订阅、订阅配置都可能匹配多个方法，而且订阅与被订阅的注册时间不分先后，所以为了绑定注册与被注册关系，需要中间的桥梁，即时间组，事件传递为：多个被订阅方法 -> 组事件 ->多个订阅方法
#eventSubscribe.group.xxx1=.*com\\.yametech\\.yangjian\\.agent\\.core\\.eventsubscribe\\.Service\\.test1\\(.* > com.yametech.yangjian.agent.core.eventsubscribe.Listener.test1\\(.*
#eventSubscribe.group.xxx2=.*com\\.yametech\\.yangjian\\.agent\\.core\\.eventsubscribe\\.Service\\.test1\\(.* > com.yametech.yangjian.agent.core.eventsubscribe.Listener.test1_1\\(.*
#eventSubscribe.group.xxx3=.*com\\.yametech\\.yangjian\\.agent\\.core\\.eventsubscribe\\.Service\\.test1\\(.* > com.yametech.yangjian.agent.core.eventsubscribe.Listener.test1_2\\(.*
#eventSubscribe.group.ignoreParams.xxx4=.*com\\.yametech\\.yangjian\\.agent\\.core\\.eventsubscribe\\.Service\\.test2\\(.* > com.yametech.yangjian.agent.core.eventsubscribe.Listener.test2\\(.*
#eventSubscribe.group.ignoreParams.xxx5=.*com\\.mongodb\\.Mongo\\$3\\.execute\\(.*,com\\.mongodb\\.session\\.ClientSession\\).* > cn.ecpark.tool.monitor.EventSubscribeTest.test\\(.*
